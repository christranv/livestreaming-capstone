// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stream.Infrastructure;

namespace Stream.API.Infrastructure.Migrations
{
    [DbContext(typeof(StreamContext))]
    [Migration("20210321142136_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamSessionAggregate.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("language");
                });

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Announcement")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("StreamSessionStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("StreamSessionStatusId1")
                        .HasColumnType("int");

                    b.Property<string>("StreamerId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("StreamerImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StreamerName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SubEventId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ThumbnailImage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StreamSessionStatusId");

                    b.HasIndex("StreamSessionStatusId1");

                    b.HasIndex("StreamerId");

                    b.HasIndex("SubEventId")
                        .IsUnique();

                    b.ToTable("stream_session");
                });

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSessionCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CategoryGuid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("stream_session_category");
                });

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSessionStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("stream_session_status");
                });

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSessionTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StreamSessionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("TagGuid")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("StreamSessionId");

                    b.ToTable("stream_session_tag");
                });

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamerAggregate.Streamer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("IdentityGuid")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4");

                    b.Property<string>("StreamKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("IdentityGuid")
                        .IsUnique();

                    b.HasIndex("StreamKey")
                        .IsUnique();

                    b.ToTable("streamer");
                });

            modelBuilder.Entity("Stream.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("request");
                });

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSession", b =>
                {
                    b.HasOne("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSessionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stream.Domain.AggregatesModel.StreamSessionAggregate.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSessionStatus", null)
                        .WithMany()
                        .HasForeignKey("StreamSessionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSessionStatus", "StreamSessionStatus")
                        .WithMany()
                        .HasForeignKey("StreamSessionStatusId1");

                    b.HasOne("Stream.Domain.AggregatesModel.StreamerAggregate.Streamer", "Streamer")
                        .WithMany()
                        .HasForeignKey("StreamerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("Streamer");

                    b.Navigation("StreamSessionStatus");
                });

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSessionTag", b =>
                {
                    b.HasOne("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSession", null)
                        .WithMany("Tags")
                        .HasForeignKey("StreamSessionId");
                });

            modelBuilder.Entity("Stream.Domain.AggregatesModel.StreamSessionAggregate.StreamSession", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
